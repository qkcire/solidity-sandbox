INSTALlING THE SOLIDITY COMPILER
 01. VERSIONING
  Solidity versions follow semantic versioning and in addition
  to releases, nightly development builds are also made
  available.
  The nightly builds are not guaranteed to be working and despite
  best efforts they might contain undocumented and/or broken
  changes.
  We recommend using the latest release.
  Package installers below will use the latest release.

 02. REMIX
  We recommend Remix for small contracts and for quickly learning
  solidity.

  Access Remix Online, you do not need to install anything.
  If you want to use it without connection to the Internet, go to
  the github link and download the .zip file as explained on that
  page.
  Remix is also a convenient option for testing nightly builds without
  installing multiple Solidity versions.

  Further options on this page detail installing commandline
  solidity compiler software on your computer.
  choose a commandline compiler if you are working on a larger
  contract or if you require more compilation options.

 03. NPM / NODE.JS
  Use npm for a convenient and portable way to install solcjs, a Solidity
  compiler. 
  The solcjs program has fewer features than the ways to access the compiler
  described furhter down this page.
  The Using the Commandline Compiler documentation assumes you are using
  the full-featured compiler, solc.
  The usage of solcjs is documented insidet its own repo.

  NOTE
   The solc-js project is derived from the C++ solc by using Emscripten
   which means that both use the same compiler source code. solc-js can be
   used in JavaScript projects directly (such as Remix).
   Please refer to the solc-js repository for instructions.

   np install -g solc
  
   The commandline executable is name solcjs.

   The commandline options of solcjs are not compatible with solc and tools
   (such as geth) expecting the behavior of solc will not work with
   solcjs.

 04. DOCKER
  Docker images of Solidity builds are available using the solc image
  from the ethereum organisation.
  Use the stable tag for the latest released version, and nightly
  for potentially unstable changes in the develop branch.

  the docker image run the compiler executable, so you can pass all compiler
  arguments to it.
  For example, the command below pulls the stable version of the
  solc image (if you do not have it alread), and runs it in a new container,
  passing the --help argument.

  docker run ethereum/socl:stable --help

  You can also specify release build versions in the tage, for example, for
  the 0.5.4 release.

  docker run ethereum/solc:0.5.4 --help

  To use the Docker image to compile Solidity files on the host
  machine mount a local folder for input and output, and specify
  the contract to compile.

  For example:
  docker run -v /local/path:/sources ethereum/solc:stable -o /sources/output --abi --bin /sources/Contract.sol

  You can also use the standard JSON interface (which is recommended when using
  the compiler with tooling). When using this interface it is not necessary to
  mount any directories as long as the JSON input is self-contained
  (i.e. it does not refer to any external files that would have
  to be loaded by the import callback).

  docker run ethereum/soc:stable --standard-json < input.json > output.js

 05. LINUX PACKAGES
  Binary packages of Solidity are available at solidity/releases.

  We also have PPAs for ubuntu, you can get the latest stable version using
  the following commands:

  sudo add-apt reposity ppa: ethereum/ethereum
  sudo apt-get update
  sudo apt-get install solc

  The nightly version can be installed using these commands:
  
  sudo add-apt-repository ppa:ethereum/ethereum
  sudo add-apt-repository ppa:ethereum/ethereum-dev
  sudo apt-get update
  sudo apt-get install solc

  We are also releasing a snap package, which is installable in all the supported
  Linux distros. 
  To install the latest stable version of solc:
  
  sudo snap install solc

  If you want to help testing the latest development version of
  Solidity with the most recent changes, please use the following:
  
  sudo snap install solc --edge

  NOTE
   The solc snap uses strict confinment.
   This is the most secure mode for snap packages but it comes with
   limitation, like accessing only the files in your /home and /media
   directories.
   For more information, go to Demystifying Snap Confinement.

  Arch Linux also has packages, albeit limited to the latest development
  version:

  pacman -S solidity

  Gentoo Linux has an Ethereum overlay that contains a Solidity package.
  After the overlay is setup, solc can be installed in x86_64 architectures by:

  emerge dev-lang/solidity

 06. MACOS PACKAGES
  We distribute the Solidity compiler through Homebrew as a
  build-from-source version.
  Pre-built bottles are currently not supported.

  brew update
  brew upgrade
  brew tap ethereum/ethereum
  brew install solidity

  To install the most recent 0.4.x / 0.5.x version of Solidity you can
  also use brew install solidity@4 and brew install solidity@5, respectively.

  If you need a specific version of Solidity you can install a Homebrew
  formula directly from Github.

  View solidity.rb commits on Github.

  Copy the commit hash of the version you want and check it
  out on your machine.

  git clone https://github.com/ethereum/homebrew-ethereum.git
  cd homebrew-ethereum
  git checkout <your-hash-goes-here>

  Installing it using brew:
  brew unlink solidity
  # eg. Install 0.4.8
  brew install solidity.rb

 07. STATIC BINARIES
  We maintain a repository containing static builds of past and current
  compiler versions for all supported platforms at solc-bin.
  This is also the location where you can find the nightly builds.

  The repository is not only a quick and easy way for end users to get
  binaries ready to be used out-of-the-box but it is also meant to be friendly
  to third-party tools:
   - the content is mirrored to https://binaries.soliditylang.org where it can
     easily downlaoded over HTTPS without any authentication, rate limiting
     or the need to use git.
   - Content is served with correct Content-Type headers and lenient CORS configuration
     so that it can be directly loaded by tools running in the browser.
   - Binaries do not require installation or unpacking (with the exception of
     older Windows build bundled with necessary DLLs).
   - We strive for a high level of backwards-compability. Files, once added,
     are not removed or moved without providing a symlink/redirect at the old
     location. They are also never modified in place and should always match the
     original checksum. The only exception would be broken or unusable files with
     a potential to cause more harm than good if left as is.
   - Files are served over both HTTP and HTTPS. As long as you obtain the file
     list in a secure way (via git, HTTPs, IPFS or just have it cached locally) 
     and verify hashes of the binaries after downloading them, you do not
     have to use HTTPS for the binaries themselves.
  
  The same binaries are in most cases available on the Solidity release page
  on Github.
  The difference is that we do not generally update old releases on the
  Github release page.
  This means that we do not rename them if the naming convention changes
  and we do not add builds for platforms that were not supported at the time of
  release. 
  This only happens in solc-bin.

  The solc-bin repository contains several top-level directories, each representing
  a single platform.
  Each one contains a list.json file listning the available binaries.
  For example in emscripten-wasm32/list.json you will find the
  following information about version 0.7.4:

  {
    "path": ...,
    "version": ...,
    "build": ...,
    "longVersion": ...,
    "keccak256": ...,
    "sha256": ...,
    "urls":[ ... ],
  }

  This means that:
   - YOu can find the binary in the same directory under the name ... .
     Note that the file might be a symlink, and youi will need to resolve it
     yourself if you are not using git to download it or your file system
     does not support symlinks.
   - The binary is also mirrored at [ ... ].
     In this case git is not necessary and symlinks are resolved transparently,
     either by serving a copy of the file or returning a HTTP redirect.
   - The file is also available on IPFS at "..." .
   - The file mishgt in future be available on Swarm at "..." .
   - You can verify the integrity of the binary by comparing its keccak256
     hash to "..." . The hash can be computed on the command line using
     keccak256sum utility provided by sha3sum or keccak256() function from
     ethereumjs-util in JavaScript.
   - YOu can also verify the integrity of the binary by comparing its sha256 has to "..." .
  
  WARNING
   Due to the strong backwards compatibility requirement the repository
   contains some legacy elements but you should avoid using them when
   writing new tools:

    - Use emscripten-wasm32/ (with a fallback to emscripten-asmjs/) instead of bin/
      if you want the best performance. Until version 0.6.1 we only 
      provided asm.js binaries. Starting with 0.6.2 we switched to 
      WebAssembly builds with much better performance. We have rebuilt the older
      versions for wasm but the original asm.js files remain in bin/. The
      new ones had to be placed in a separate directory to avoid name clashes.
    - USe emscreipten-asmjs/ and emscripten-wasm32/ instead of bin/ and wasm/
      directories if you want to be sure whethere you are downloading a wasm or an
      asm.js binary
    - Use list.json instead of list.js and list.txt. The JSON list format contains
      all the information from the old ones and more.
    - Use [link] instead of [link]. To keep things simple we moved almost everything
      related to the compilar under the new soliditylang.org domain and this applies
      to solc-bin too. While the new domain is recommended, the old one is still
      fully supported and guaranteed to point at the same location.

   The binaries are also available to [link] but this page stopped
   being updated just after the release of version 0.7.2, will not receive
   any new releases or nightly builds for any platform and does not serve
   the new directory structure, including non-emscripten builds.

   If you are using it, please switch to [link], which is a drop-in replacement.
   This allows us to make changes to the underlying hosting in a transparent
   way and minimuize disruption. Unlike the ethereum.github.io domaina, which we 
   do not have any control over, binaries.soliditylang.org is guaranteed to work
   and maintain the same URL structure in the long-term.

 08. BUILDING FROM SOURCE
  PREREQUISITES - ALL OPERATING SYSTEMS
  The following are dependencies for all builds of solidity:
  CMake (version 3.13+): cross-platform build file generator
  Boost (version 1.77+ on Windows, 1.65+ otherwise): c++ libraries
  Git (): Command-line tool for retreiving source code.
  z3 (version 4.8+, optional): for use with SMT checker.
  cvc4 (optional): for use with SMT checker.

  NOTE
   Solidity versions prior to 0.5.10 can fail to correctly linke against
   Boost version 1.70+. A possible workaround is to temporarily
   rename <Boost install path>/lib/cmake/Boost-1.70.0 prior to running
   the cmake command to configure solidity.

  MINIMUM COMPILER VERSIONS
  The following C++ compilers and their minimum versions can build
  the solidity codebase:
   gcc, version 8+
   clang, version 7+
   msvc, version 2019+
  
  PREREQUISITES - MACOS
  For macOS builds, ensure that you have the latest version of
  xcode installed.
  This contains the clang c++ compiler, the xcode ide and other
  Apple development tools that are required for building C++
  applications on OS X. 
  If you are installing Xcode for the first time, or have just
  installed a new version then you will need to agree to the license
  before you can do command-line builds:
  
  sudo xcodebuild -license accept

  Our OS X build script uses the Homebrew package manager for installing
  external dependencies.
  Here's how to uninstall Homebrew, if you ever want to start again from
  scratch.

  PREREQUSITES - WINDOW
  You need to isntall the following dependencies for Windows builds of
  Solidity:
  [ SOFTWARE, NOTES ]

  If you already have on IDE and only need the compiler and libraries, you
  could install Visual Studio 2019 Build Tools.

  Visual Studio 2019 procides both IDE and necessary compiler and libraries.
  So if you have not got an IDE and prefer to develop Solidity, Visual
  Studio 2019 may be a choice for you to get everything setup easily.

  Here is the list of components that should be installed in Visual Studio 2019
  Build Tools or Visual Studio 2019:
  [ ul ]

  DEPENDENCIES HELPER SCRIPT
  We have a helper script which you can use to install all required
  external dependencies on macOS, Windows and on numerous Linux distros.
  
  ./scripts/install_deps.sh

  Or, on Windows:

  scripts\install_deps.ps1

  Note that the latter command will isntall boost and cmake to the deps
  subdirectory, while the former command will attempt to install the
  dependencies globally.

  CLONE THE REPOSITORY
  To clone the source code, execute the following command:

  git clone --recursive https://github.com/ethereum/solidity.git
  cd solidity

  If you want to help developing Solidity, you should fork soldity and
  add your personal fork as a second remote:
  
  git remote add personal git@github.com:qkcire/solidity.git

  NOTE
   This method will result in a prerelease build leading to e.g.
   a flag being set in each bytecode produced by such a compiler.
   If you want to rebuild a released Solidity compiler, then please use
   the source tarball on the github release page:

   [github link]

   (not the "Source code" provided by github).
  
  COMMAND-LINE BUILD
  BER SURE TO INSTSALL EXTERNAL DEPENDENCIES (SEE ABOVE) BEFORE BUILD.

  Solidity project uses CMake to configure the build.
  You might want to install ccache to speed up repeated builds.
  CMake will pick it up automatically.
  Building Solidity is quite similar on Linux, macOS and other Unices:

  mkdir build
  cd build
  cmake .. && make

  or even easier on Linux and macOS, you can run:

  #note: this will intall binaries solc and soltest at usr/local/bin
  ./scripts/build.sh

  WARNING
   BSD builds should work, but are untested by the Solidity team.

  And for Windows:
  mkdir build
  cd build
  cmake -G "Visual Studio 16 2019" ...

  In case you want to use the version of boost intalled by 
  scripts\install_deps.ps1, you will additionally need to pass
  -DBoost_DIR="deps\boost\lib\cmake\Boos-*" and 
  -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded as arguments to the
  call to cmake.

  This should result in the creation of solidity.sln in that build
  directory.
  Double-clicking on that file should result in Visual Studio firing
  up.
  We suggest building Release configuration, but all others work.

  Alternatively, you can build for Windows on the command-line, like so:
  
  cmake --build . --config Release

  CMAKE OPTIONS

  If you are interested what CMake options are available
  run cmake .. -LH.

  SMT SOLVERS
  Solidity can be built against SMT solvers and will do so by default
  if they are found in the system.
  Each solver can be disabled by a cmake option.

  Note: In some cases, this can also be a potential workaround for
  build failures.

  Inside the build folder you can disable them, since they are
  enabled by default:

  # disables only Z3 SMT Solver.
  cmake .. -DUSE_Z3=OFF

  # disables only CVC4 SMT Solver.
  cmake .. -DUSE_CVC4=OFF

  # disables both Z3 and CVC4
  cmake .. -DUSE_CVC4=OFF -DUSE_Z3=OFF

  THE VERSION STRING IN DETAIL
  The solidity version string contains four parts:

  - the version number
  - pre-release tag, usually set to develop.YYYY.MM.DD or
    nightly.YYYY.MM.DD
  - Commit in the format of commit.GITHASH
  - Platform, which has an arbitrary number of items,
    containing details about the platform and compiler.
  
  If there are local modifications, the commit will be
  postfixed with .mod.

  These parts are combined as required by Semver, where the 
  solidity prerelease tag equals to the Semver pre-release
  and the Solidity commit and platform combined make up the
  Semvery build metadata.

  A release example: 0.4.8+commit.60cc1668.Emscripten.clang.
  
  A prerelease example: 0.4.9-nightly.2017.1.17+commit.6ecb4aa3.Emscripten.clang

  IMPORTANT INFORMATION ABOUT VERSIONING
  After a release is made, the patch version level is bumped, 
  because we assume that only patch level changes follow.
  When changes are merged, the vrsion should be bumped according to
  semver and the severity of the change. Finally, a release is always
  made with the version of the current nightly build, but without 
  the prerelease specifier.

  Example:
  0. The 0.4.0 release is made.
  1. The nightly build has a version of 0.4.1 from now on.
  2. Non-breaking changes are introduced -> no change in version.
  3. A breaking change is introduced -> version is bumped to 0.5.0
  4. The 0.5.0 release is made

  This behavior works well with the version pragma.

